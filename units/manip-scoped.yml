title: Scoped verbs
theme: wrangle
needs: manip-basics
readings: ~
updated: ~
desc: "\n## Introduction\n\nEach of the single table verbs comes in three additional
  forms with the\nsuffixes `_if`, `_at`, and `_all`. These **scoped** variants allow
  you\nto work with multiple variables with a single call:\n\n  - `_if` allows you
  to pick variables based on a predicate function\n    like `is.numeric()` or `is.character()`.\n\n
  \ - `_at` allows you to pick variables using the same syntax as\n    `select()`.\n\n
  \ - `_all` operates on all variables.\n\nThese variants are coupled with `funs()`
  and `vars()` helpers that let\nyou describe which functions you want to apply to
  which variables.\n\nThe scoped verbs are useful because they can allow you to save
  a lot of\ntyping. For example, imagine that you want to group\n`nycflights13::flights`
  by destination, then compute the mean the delay\nvariables, the distance, and the
  time in the air. That’s a lot of\ntyping\\!\n\n``` r\nlibrary(nycflights13)\n\nflights
  %>%\n  group_by(dest) %>%\n  summarise(\n    dep_delay = mean(dep_delay, na.rm =
  TRUE),\n    arr_delay = mean(arr_delay, na.rm = TRUE),\n    distance = mean(distance,
  na.rm = TRUE),\n    air_time = mean(air_time, na.rm = TRUE)\n  )\n```\n\nWe can
  save a bunch of typing by using `summarise_ar()` instead:\n\n``` r\nflights %>%\n
  \ group_by(dest) %>%\n  summarise_at(\n    vars(dep_delay, arr_delay, distance,
  air_time),\n    funs(mean(., na.rm = TRUE))\n  )\n#> # A tibble: 105 x 5\n#>   dest
  \ dep_delay arr_delay distance air_time\n#>   <chr>     <dbl>     <dbl>    <dbl>
  \   <dbl>\n#> 1 ABQ       13.7       4.38     1826    249  \n#> 2 ACK        6.46
  \     4.85      199     42.1\n#> 3 ALB       23.6      14.4       143     31.8\n#>
  4 ANC       12.9     - 2.50     3370    413  \n#> 5 ATL       12.5      11.3       757
  \   113  \n#> # ... with 100 more rows\n```\n\nYou can imagine that this gets even
  more helpful as the number of\nvariables increases.\n\nI’ll illustrate the three
  variants in detail for `summarise()`, then\nshow how you can use the same ideas
  with `mutate()` and `filter()`.\nYou’ll need the scoped variants of the other verbs
  less frequently,\nbut when you do, it should be straightforward to generalise what
  you’ve\nlearn here.\n\n## Summarise\n\n### `summarise_all()`\n\nThe simplest variant
  to understand is `summarise_all()`. The first\nargument is a tibble. The second
  argument is one of more functions\nwrapped inside of the `funs()` helper:\n\n```
  r\ndf <- tibble(\n  x = runif(100),\n  y = runif(100),\n  z = runif(100)\n)\nsummarise_all(df,
  funs(mean))\n#> # A tibble: 1 x 3\n#>       x     y     z\n#>   <dbl> <dbl> <dbl>\n#>
  1 0.465 0.488 0.483\nsummarise_all(df, funs(min, max))\n#> # A tibble: 1 x 6\n#>
  \     x_min   y_min    z_min x_max y_max z_max\n#>      <dbl>   <dbl>    <dbl> <dbl>
  <dbl> <dbl>\n#> 1 0.000340 0.00541 0.000948 0.994 0.999 0.997\n```\n\nYou might
  wonder why we need `funs()`. You don’t actually need it if you\nhave a single function,
  but it’s necessary for technical reasons for\nmore than one function, and always
  using it makes your code more\nconsistent.\n\nYou can also use `funs()` with custom
  expressions: just use a `.` as a\npronoun to denote the “current” column:\n\n```
  r\nsummarise_all(df, funs(mean(., na.rm = TRUE)))\n#> # A tibble: 1 x 3\n#>       x
  \    y     z\n#>   <dbl> <dbl> <dbl>\n#> 1 0.465 0.488 0.483\n```\n\nNB: unfortunately
  `funs()` does not use the same syntax as purrr - you\ndon’t need the `~` in front
  of a custom function like you do in purrr.\nThis is an unfortunate oversight that
  is relatively hard to fix, but\nwill hopefully be resolved in dplyr one day.\n\n###
  `summarise_at()`\n\n`summarise_at()` allows you to pick columns to summarise in
  the same way\nas `select()`. There is one small difference: you need to wrap the\ncomplete
  selection with the `vars()` helper:\n\n``` r\nsummarise_at(df, vars(-z), funs(mean))\n#>
  # A tibble: 1 x 2\n#>       x     y\n#>   <dbl> <dbl>\n#> 1 0.465 0.488\n```\n\nYou
  can put anything inside `vars()` that you can put inside a call to\n`select()`:\n\n```
  r\nlibrary(nycflights13)\nsummarise_at(flights, vars(contains(\"delay\")), funs(mean),
  na.rm = TRUE)\n#> # A tibble: 1 x 2\n#>   dep_delay arr_delay\n#>       <dbl>     <dbl>\n#>
  1      12.6      6.90\nsummarise_at(flights, vars(starts_with(\"arr\")), funs(mean),
  na.rm = TRUE)\n#> # A tibble: 1 x 2\n#>   arr_time arr_delay\n#>      <dbl>     <dbl>\n#>
  1     1502      6.90\n```\n\n(Note that `na.rm = TRUE` is passed on to `mean()`
  in the same way as in\n`purrr::map()`.)\n\nIf the function doesn’t fit on one line,
  put each argument on a new\nline:\n\n``` r\nflights %>%\n  group_by(dest) %>% \n
  \ summarise_at(\n    vars(contains(\"delay\"), distance, air_time), \n    funs(mean),
  \n    na.rm = TRUE\n  )\n#> # A tibble: 105 x 5\n#>   dest  dep_delay arr_delay
  distance air_time\n#>   <chr>     <dbl>     <dbl>    <dbl>    <dbl>\n#> 1 ABQ       13.7
  \      4.38     1826    249  \n#> 2 ACK        6.46      4.85      199     42.1\n#>
  3 ALB       23.6      14.4       143     31.8\n#> 4 ANC       12.9     - 2.50     3370
  \   413  \n#> 5 ATL       12.5      11.3       757    113  \n#> # ... with 100 more
  rows\n```\n\nBy default, the newly created columns have the shortest names needed
  to\nuniquely identify the output. See the examples in the documentation if\nyou
  want to force names when they’re not otherwise needed.\n\n``` r\n# Note the use
  of extra spaces to make the 3rd argument line\n# up - this makes it easy to scan
  the scoe and see what's different\nsummarise_at(df, vars(x),    funs(mean))\n#>
  # A tibble: 1 x 1\n#>       x\n#>   <dbl>\n#> 1 0.465\nsummarise_at(df, vars(x),
  \   funs(min, max))\n#> # A tibble: 1 x 2\n#>        min   max\n#>      <dbl> <dbl>\n#>
  1 0.000340 0.994\nsummarise_at(df, vars(x, y), funs(mean))\n#> # A tibble: 1 x 2\n#>
  \      x     y\n#>   <dbl> <dbl>\n#> 1 0.465 0.488\nsummarise_at(df, vars(x, y),
  funs(min, max))\n#> # A tibble: 1 x 4\n#>      x_min   y_min x_max y_max\n#>      <dbl>
  \  <dbl> <dbl> <dbl>\n#> 1 0.000340 0.00541 0.994 0.999\n```\n\n### `summarise_if()`\n\n`summarise_if()`
  allows you to pick variables to summarise based on some\nproperty of the column,
  specified by a **predicate** function. A\npredicate function is a function that
  takes a whole column and returns\neither a single `TRUE` or a single `FALSE`. Commonly
  this a function\nthat tells you if a variable is a specific type like `is.numeric()`,\n`is.character()`,
  or `is.logical()`.\n\nThis makes it easier to summarise only numeric columns:\n\n```
  r\nstarwars %>%\n  group_by(species) %>%\n  summarise_if(is.numeric, funs(mean),
  na.rm = TRUE)\n#> # A tibble: 38 x 4\n#>   species  height  mass birth_year\n#>
  \  <chr>     <dbl> <dbl>      <dbl>\n#> 1 Aleena     79.0  15.0      NaN  \n#> 2
  Besalisk  198   102        NaN  \n#> 3 Cerean    198    82.0       92.0\n#> 4 Chagrian
  \ 196   NaN        NaN  \n#> 5 Clawdite  168    55.0      NaN  \n#> # ... with 33
  more rows\n```\n\n## Mutate\n\n`mutate_all()`, `mutate_if()` and `mutate_at()` work
  in a similar way to\ntheir summarise equivalents.\n\n``` r\nmutate_all(df, funs(log10))\n#>
  # A tibble: 100 x 3\n#>         x        y      z\n#>     <dbl>    <dbl>  <dbl>\n#>
  1 -0.470  -0.00447 -0.241\n#> 2 -0.144  -0.837   -0.141\n#> 3 -0.384  -0.325   -0.229\n#>
  4 -0.325  -0.831   -0.295\n#> 5 -0.0196 -0.639   -0.506\n#> # ... with 95 more rows\n```\n\nIf
  you need a transformation that is not already a function, it’s\neasiest to create
  your own function:\n\n``` r\ndouble <- function(x) x * 2\nhalf <- function(x) x
  / 2\n\nmutate_all(df, funs(half, double))\n#> # A tibble: 100 x 9\n#>       x     y
  \    z x_half y_half z_half x_double y_double z_double\n#>   <dbl> <dbl> <dbl>  <dbl>
  \ <dbl>  <dbl>    <dbl>    <dbl>    <dbl>\n#> 1 0.339 0.990 0.574  0.170 0.495   0.287
  \   0.678    1.98     1.15 \n#> 2 0.718 0.145 0.723  0.359 0.0727  0.362    1.44
  \    0.291    1.45 \n#> 3 0.413 0.474 0.590  0.207 0.237   0.295    0.826    0.947
  \   1.18 \n#> 4 0.473 0.148 0.507  0.236 0.0739  0.254    0.945    0.295    1.01
  \n#> 5 0.956 0.230 0.312  0.478 0.115   0.156    1.91     0.459    0.623\n#> # ...
  with 95 more rows\n```\n\nThe default names are generated in the same way as `summarise()`.
  That\nmeans that you may want to use a `transmute()` variant if you want to\napply
  multiple transformations and don’t want the original values:\n\n``` r\ntransmute_all(df,
  funs(half, double))\n#> # A tibble: 100 x 6\n#>   x_half y_half z_half x_double
  y_double z_double\n#>    <dbl>  <dbl>  <dbl>    <dbl>    <dbl>    <dbl>\n#> 1  0.170
  0.495   0.287    0.678    1.98     1.15 \n#> 2  0.359 0.0727  0.362    1.44     0.291
  \   1.45 \n#> 3  0.207 0.237   0.295    0.826    0.947    1.18 \n#> 4  0.236 0.0739
  \ 0.254    0.945    0.295    1.01 \n#> 5  0.478 0.115   0.156    1.91     0.459
  \   0.623\n#> # ... with 95 more rows\n```\n\n## Filter\n\nThe `filter()` variants
  work a little differently to `summarise()` and\n`mutate()`. Like `summarise()` and
  `mutate()` you must choose between\neither all variables (`_all`), selecting variables
  by name (`_at`), or\nselecting by some property of the variable (`_if`). However,
  the\n`funs()` is no longer enough because you need to say whether the\nfiltering
  functions should be combined with “and” (`&`) or “or” (`|`).\nThat means that `funs()`
  is not enough:\n\n``` r\ndiamonds %>% filter_all(funs(. == 0))\n#> Error: `.vars_predicate`
  must be a call to `all_vars()` or `any_vars()`, not list\n```\n\nYou have to be
  explicit and say you either want the rows where the all\nof the variables equal
  0:\n\n``` r\ndiamonds %>% filter_if(is.numeric, all_vars(. == 0))\n#> # A tibble:
  0 x 10\n#> # ... with 10 variables: carat <dbl>, cut <ord>, color <ord>,\n#> #   clarity
  <ord>, depth <dbl>, table <dbl>, price <int>, x <dbl>,\n#> #   y <dbl>, z <dbl>\n```\n\nOr
  the rows where any of the variables equals zero:\n\n``` r\ndiamonds %>% filter_if(is.numeric,
  any_vars(. == 0))\n#> # A tibble: 20 x 10\n#>   carat cut     color clarity depth
  table price     x     y     z\n#>   <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int>
  <dbl> <dbl> <dbl>\n#> 1  1.00 Premium G     SI2      59.1  59.0  3142  6.55  6.48
  \    0\n#> 2  1.01 Premium H     I1       58.1  59.0  3167  6.66  6.60     0\n#>
  3  1.10 Premium G     SI2      63.0  59.0  3696  6.50  6.47     0\n#> 4  1.01 Premium
  F     SI2      59.2  58.0  3837  6.50  6.47     0\n#> 5  1.50 Good    G     I1       64.0
  \ 61.0  4731  7.15  7.04     0\n#> # ... with 15 more rows\n```\n\nThis is particularly
  useful if you’re looking for missing values:\n\n``` r\nflights %>% filter_all(any_vars(is.na(.)))\n#>
  # A tibble: 9,430 x 19\n#>    year month   day dep_time sched_dep_time dep_delay
  arr_time\n#>   <int> <int> <int>    <int>          <int>     <dbl>    <int>\n#>
  1  2013     1     1     1525           1530    - 5.00     1934\n#> 2  2013     1
  \    1     1528           1459     29.0      2002\n#> 3  2013     1     1     1740
  \          1745    - 5.00     2158\n#> 4  2013     1     1     1807           1738
  \    29.0      2251\n#> 5  2013     1     1     1939           1840     59.0        29\n#>
  # ... with 9,425 more rows, and 12 more variables: sched_arr_time <int>,\n#> #   arr_delay
  <dbl>, carrier <chr>, flight <int>, tailnum <chr>,\n#> #   origin <chr>, dest <chr>,
  air_time <dbl>, distance <dbl>, hour <dbl>,\n#> #   minute <dbl>, time_hour <dttm>\n```\n"
