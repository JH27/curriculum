title: Vector and summary functions
theme: wrangle
needs:
- manip-basics
- missing-values
readings: ~
updated: ~
desc: "\n``` r\nlibrary(tidyverse)\n#> ── Attaching packages ───────────────────────
  tidyverse 1.2.0.9000 ──\n#> ✔ ggplot2 2.2.1.9000     ✔ purrr   0.2.4     \n#> ✔
  tibble  1.4.1          ✔ dplyr   0.7.4     \n#> ✔ tidyr   0.7.2.9000     ✔ stringr
  1.2.0     \n#> ✔ readr   1.1.1          ✔ forcats 0.2.0\n#> ── Conflicts ───────────────────────────────
  tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()
  \   masks stats::lag()\nlibrary(nycflights13)\n```\n\n`mutate()` and `summarise()`
  operate on data frames. You use them with\nvector and summary functions which work
  with individual variables (or\nvectors).\n\n## Vector functions\n\nA vector function
  takes one (or sometimes more) vectors as input and\nreturns a vector of the same
  length as output. These are typically used\nwith `mutate()` to create new variables.\n\nI
  can’t list every vector function, but here’s a few that are often\nuseful:\n\n  -
  Arithmetic operators: `+`, `-`, `*`, `/`, `^`. These are all\n    vectorised, using
  the so called “recycling rules”. If one parameter\n    is shorter than the other,
  it will be automatically extended to be\n    the same length. This is most useful
  when one of the arguments is a\n    single number: `air_time / 60`, `hours * 60
  + minute`, etc.\n    \n    Arithmetic operators are also useful in conjunction with
  the\n    aggregate functions you’ll learn about later. For example, `x /\n    sum(x)`
  calculates the proportion of a total, and `y - mean(y)`\n    computes the difference
  from the mean.\n\n  - Modular arithmetic: `%/%` (integer division) and `%%` (remainder),\n
  \   where `x == y * (x %/% y) + (x %% y)`. Modular arithmetic is a handy\n    tool
  because it allows you to break integers up into pieces. For\n    example, in the
  flights dataset, you can compute `hour` and `minute`\n    from `dep_time` with:\n
  \   \n    ``` r\n    flights %>% \n      transmute(\n        dep_time,\n        hour
  = dep_time %/% 100,\n        minute = dep_time %% 100\n      )\n    #> # A tibble:
  336,776 x 3\n    #>    dep_time  hour minute\n    #>       <int> <dbl>  <dbl>\n
  \   #>  1      517  5.00   17.0\n    #>  2      533  5.00   33.0\n    #>  3      542
  \ 5.00   42.0\n    #>  4      544  5.00   44.0\n    #>  5      554  5.00   54.0\n
  \   #>  6      554  5.00   54.0\n    #>  7      555  5.00   55.0\n    #>  8      557
  \ 5.00   57.0\n    #>  9      557  5.00   57.0\n    #> 10      558  5.00   58.0\n
  \   #> # ... with 336,766 more rows\n    ```\n\n  - Logs: `log()`, `log2()`, `log10()`.
  Logarithms are an incredibly\n    useful transformation for dealing with data that
  ranges across\n    multiple orders of magnitude. They also convert multiplicative\n
  \   relationships to additive, a feature we’ll come back to in\n    modelling.\n
  \   \n    All else being equal, I recommend using `log2()` because it’s easy\n    to
  interpret: a difference of 1 on the log scale corresponds to\n    doubling on the
  original scale and a difference of -1 corresponds to\n    halving.\n\n  - Logical
  comparisons, `<`, `<=`, `>`, `>=`, `!=`, which you learned\n    about earlier. If
  you’re doing a complex sequence of logical\n    operations it’s often a good idea
  to store the interim values in new\n    variables so you can check that each step
  is working as expected.\n\n  - `if_else()` allows you perform a conditional calculation.
  The first\n    argument should be a logical statement; the second argument is the\n
  \   value to use if the first argument is true; the third argumetn is\n    the value
  to use if the first argumetn is false.\n    \n    ``` r\n    flights %>% \n      transmute(\n
  \       on_time = if_else(arr_delay < 0, \"early\", \"late\")\n      )\n    #> #
  A tibble: 336,776 x 1\n    #>    on_time\n    #>    <chr>  \n    #>  1 late   \n
  \   #>  2 late   \n    #>  3 late   \n    #>  4 early  \n    #>  5 early  \n    #>
  \ 6 late   \n    #>  7 late   \n    #>  8 early  \n    #>  9 early  \n    #> 10
  late   \n    #> # ... with 336,766 more rows\n    ```\n\n  - `case_when()` allows
  you to combine multiple logical conditions,\n    evaluated in turn. Each condition
  goes on the left hand side of the\n    `~`, and the result goes on the right hand
  side.\n    \n    ``` r\n    flights %>% \n      transmute(\n        on_time = case_when(\n
  \         abs(arr_delay) < 10 ~ \"on time\",\n          arr_delay < 0 ~ \"early\",\n
  \         arr_delay > 0 ~ \"late\",\n          is.na(arr_delay) ~ \"cancelled\"\n
  \       )\n      )\n    #> # A tibble: 336,776 x 1\n    #>    on_time\n    #>    <chr>
  \ \n    #>  1 late   \n    #>  2 late   \n    #>  3 late   \n    #>  4 early  \n
  \   #>  5 early  \n    #>  6 late   \n    #>  7 late   \n    #>  8 early  \n    #>
  \ 9 on time\n    #> 10 on time\n    #> # ... with 336,766 more rows\n    ```\n\n##
  Summary functoins\n\nA summary function takes a vector of inputs and returns a single
  output.\nThey are most commonly used with `summarise()`.\n\nJust using means, counts,
  and sum can get you a long way, but R provides\nmany other useful summary functions:\n\n
  \ - Measures of location: we’ve used `mean(x)`, but `median(x)` is also\n    useful.
  The mean is the sum divided by the length; the median is a\n    value where 50%
  of `x` is above it, and 50% is below it.\n    \n    It’s sometimes useful to combine
  aggregation with logical\n    subsetting. We haven’t talked about this sort of subsetting
  yet, but\n    you’ll learn more about it later.\n    \n    ``` r\n    flights %>%
  \n      group_by(year, month, day) %>% \n      summarise(\n        avg_delay1 =
  mean(arr_delay),\n        avg_delay2 = mean(arr_delay[arr_delay > 0]) # the average
  positive delay\n      )\n    #> # A tibble: 365 x 5\n    #> # Groups: year, month
  [?]\n    #>     year month   day avg_delay1 avg_delay2\n    #>    <int> <int> <int>
  \     <dbl>      <dbl>\n    #>  1  2013     1     1         NA         NA\n    #>
  \ 2  2013     1     2         NA         NA\n    #>  3  2013     1     3         NA
  \        NA\n    #>  4  2013     1     4         NA         NA\n    #>  5  2013
  \    1     5         NA         NA\n    #>  6  2013     1     6         NA         NA\n
  \   #>  7  2013     1     7         NA         NA\n    #>  8  2013     1     8         NA
  \        NA\n    #>  9  2013     1     9         NA         NA\n    #> 10  2013
  \    1    10         NA         NA\n    #> # ... with 355 more rows\n    ```\n\n
  \ - Measures of spread: `sd(x)`, `IQR(x)`, `mad(x)`. The mean squared\n    deviation,
  or standard deviation or sd for short, is the standard\n    measure of spread. The
  interquartile range `IQR()` and median\n    absolute deviation `mad(x)` are robust
  equivalents that may be more\n    useful if you have outliers.\n    \n    ``` r\n
  \   # Why is distance to some destinations more variable than to others?\n    flights
  %>% \n      group_by(dest) %>% \n      summarise(distance_sd = sd(distance)) %>%
  \n      arrange(desc(distance_sd))\n    #> # A tibble: 105 x 2\n    #>    dest  distance_sd\n
  \   #>    <chr>       <dbl>\n    #>  1 EGE         10.5 \n    #>  2 SAN         10.3
  \n    #>  3 SFO         10.2 \n    #>  4 HNL         10.0 \n    #>  5 SEA          9.98\n
  \   #>  6 LAS          9.91\n    #>  7 PDX          9.88\n    #>  8 PHX          9.86\n
  \   #>  9 LAX          9.66\n    #> 10 IND          9.46\n    #> # ... with 95 more
  rows\n    ```\n\n  - Measures of rank: `min(x)`, `quantile(x, 0.25)`, `max(x)`.
  Quantiles\n    are a generalisation of the median. For example, `quantile(x, 0.25)`\n
  \   will find a value of `x` that is greater than 25% of the values, and\n    less
  than the remaining 75%.\n    \n    ``` r\n    # When do the first and last flights
  leave each day?\n    flights %>% \n      group_by(year, month, day) %>% \n      summarise(\n
  \       first = min(dep_time),\n        last = max(dep_time)\n      )\n    #> #
  A tibble: 365 x 5\n    #> # Groups: year, month [?]\n    #>     year month   day
  first  last\n    #>    <int> <int> <int> <dbl> <dbl>\n    #>  1  2013     1     1
  \   NA    NA\n    #>  2  2013     1     2    NA    NA\n    #>  3  2013     1     3
  \   NA    NA\n    #>  4  2013     1     4    NA    NA\n    #>  5  2013     1     5
  \   NA    NA\n    #>  6  2013     1     6    NA    NA\n    #>  7  2013     1     7
  \   NA    NA\n    #>  8  2013     1     8    NA    NA\n    #>  9  2013     1     9
  \   NA    NA\n    #> 10  2013     1    10    NA    NA\n    #> # ... with 355 more
  rows\n    ```\n\n  - Measures of position: `first(x)`, `nth(x, 2)`, `last(x)`. These
  work\n    similarly to `x[1]`, `x[2]`, and `x[length(x)]` but let you set a\n    default
  value if that position does not exist (i.e. you’re trying to\n    get the 3rd element
  from a group that only has two elements). For\n    example, we can find the first
  and last departure for each day:\n    \n    ``` r\n    flights %>% \n      group_by(year,
  month, day) %>% \n      summarise(\n        first_dep = first(dep_time), \n        last_dep
  = last(dep_time)\n      )\n    #> # A tibble: 365 x 5\n    #> # Groups: year, month
  [?]\n    #>     year month   day first_dep last_dep\n    #>    <int> <int> <int>
  \    <int>    <int>\n    #>  1  2013     1     1       517       NA\n    #>  2  2013
  \    1     2        42       NA\n    #>  3  2013     1     3        32       NA\n
  \   #>  4  2013     1     4        25       NA\n    #>  5  2013     1     5        14
  \      NA\n    #>  6  2013     1     6        16       NA\n    #>  7  2013     1
  \    7        49       NA\n    #>  8  2013     1     8       454       NA\n    #>
  \ 9  2013     1     9         2       NA\n    #> 10  2013     1    10         3
  \      NA\n    #> # ... with 355 more rows\n    ```\n    \n    These functions are
  complementary to filtering on ranks. Filtering\n    gives you all variables, with
  each observation in a separate row:\n    \n    ``` r\n    flights %>% \n      group_by(year,
  month, day) %>% \n      mutate(r = min_rank(desc(dep_time))) %>% \n      filter(r
  %in% range(r))\n    #> # A tibble: 8,269 x 20\n    #> # Groups: year, month, day
  [365]\n    #>     year month   day dep_time sched_dep_time dep_delay arr_time\n
  \   #>    <int> <int> <int>    <int>          <int>     <dbl>    <int>\n    #>  1
  \ 2013     1     1       NA           1630        NA       NA\n    #>  2  2013     1
  \    1       NA           1935        NA       NA\n    #>  3  2013     1     1       NA
  \          1500        NA       NA\n    #>  4  2013     1     1       NA            600
  \       NA       NA\n    #>  5  2013     1     2       NA           1540        NA
  \      NA\n    #>  6  2013     1     2       NA           1620        NA       NA\n
  \   #>  7  2013     1     2       NA           1355        NA       NA\n    #>  8
  \ 2013     1     2       NA           1420        NA       NA\n    #>  9  2013     1
  \    2       NA           1321        NA       NA\n    #> 10  2013     1     2       NA
  \          1545        NA       NA\n    #> # ... with 8,259 more rows, and 13 more
  variables: sched_arr_time <int>,\n    #> #   arr_delay <dbl>, carrier <chr>, flight
  <int>, tailnum <chr>, origin\n    #> #   <chr>, dest <chr>, air_time <dbl>, distance
  <dbl>, hour <dbl>, minute\n    #> #   <dbl>, time_hour <dttm>, r <int>\n    ```\n\n
  \ - Counts: You’ve seen `n()`, which takes no arguments, and returns the\n    size
  of the current group. To count the number of non-missing\n    values, use `sum(!is.na(x))`.
  To count the number of distinct\n    (unique) values, use `n_distinct(x)`.\n    \n
  \   ``` r\n    # Which destinations have the most carriers?\n    flights %>% \n
  \     group_by(dest) %>% \n      summarise(carriers = n_distinct(carrier)) %>% \n
  \     arrange(desc(carriers))\n    #> # A tibble: 105 x 2\n    #>    dest  carriers\n
  \   #>    <chr>    <int>\n    #>  1 ATL          7\n    #>  2 BOS          7\n    #>
  \ 3 CLT          7\n    #>  4 ORD          7\n    #>  5 TPA          7\n    #>  6
  AUS          6\n    #>  7 DCA          6\n    #>  8 DTW          6\n    #>  9 IAD
  \         6\n    #> 10 MSP          6\n    #> # ... with 95 more rows\n    ```\n\n
  \ - Counts and proportions of logical values: `sum(x > 10)`, `mean(y\n    == 0)`.
  When used with numeric functions, `TRUE` is converted to 1\n    and `FALSE` to 0.
  This makes `sum()` and `mean()` very useful:\n    `sum(x)` gives the number of `TRUE`s
  in `x`, and `mean(x)` gives the\n    proportion.\n    \n    ``` r\n    # How many
  flights left before 5am? (these usually indicate delayed\n    # flights from the
  previous day)\n    flights %>% \n      group_by(year, month, day) %>% \n      summarise(n_early
  = sum(dep_time < 500))\n    #> # A tibble: 365 x 4\n    #> # Groups: year, month
  [?]\n    #>     year month   day n_early\n    #>    <int> <int> <int>   <int>\n
  \   #>  1  2013     1     1      NA\n    #>  2  2013     1     2      NA\n    #>
  \ 3  2013     1     3      NA\n    #>  4  2013     1     4      NA\n    #>  5  2013
  \    1     5      NA\n    #>  6  2013     1     6      NA\n    #>  7  2013     1
  \    7      NA\n    #>  8  2013     1     8      NA\n    #>  9  2013     1     9
  \     NA\n    #> 10  2013     1    10      NA\n    #> # ... with 355 more rows\n
  \   \n    # What proportion of flights are delayed by more than an hour?\n    flights
  %>% \n      group_by(year, month, day) %>% \n      summarise(hour_perc = mean(arr_delay
  > 60))\n    #> # A tibble: 365 x 4\n    #> # Groups: year, month [?]\n    #>     year
  month   day hour_perc\n    #>    <int> <int> <int>     <dbl>\n    #>  1  2013     1
  \    1        NA\n    #>  2  2013     1     2        NA\n    #>  3  2013     1     3
  \       NA\n    #>  4  2013     1     4        NA\n    #>  5  2013     1     5        NA\n
  \   #>  6  2013     1     6        NA\n    #>  7  2013     1     7        NA\n    #>
  \ 8  2013     1     8        NA\n    #>  9  2013     1     9        NA\n    #> 10
  \ 2013     1    10        NA\n    #> # ... with 355 more rows\n    ```\n"
