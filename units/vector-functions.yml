title: Vector functions
theme: wrangle
needs: manip-basics
readings: ~
updated: ~
desc: "\n## Letter grades\n\nIt’s easy to inadvertently create a **scalar function**,
  i.e. a function\nthat takes length 1 input and produces length 1. You can always
  apply a\nscalar function to a vector of values by using the appropriate purrr\n`map_`
  function, but you can often find a more efficient approach by\nrelying on an existing
  vectorised function.\n\nA common way to create a scalar function is by using a if-else\nstatement.
  For example, might write the following function that converts\na numeric grade to
  a letter grade:\n\n``` r\ngrade <- function(x) {\n  if (x >= 90) {\n    \"A\"\n
  \ } else if (x >= 80) {\n    \"B\"\n  } else if (x >= 70) {\n    \"C\"\n  } else
  if (x >= 60) {\n    \"D\"\n  } else {\n    \"F\"\n  }\n}\n```\n\nThis works well
  when applied to single values:\n\n``` r\ngrade(92)\n#> [1] \"A\"\ngrade(76)\n#>
  [1] \"C\"\ngrade(60)\n#> [1] \"D\"\n```\n\nBut fails if you attempt to apply it
  to an entire column of a data\nframe:\n\n``` r\ndf <- tibble(score = sample(100,
  10, replace = TRUE))\ndf %>% mutate(grade = grade(score))\n#> Warning in if (x >=
  90) {: the condition has length > 1 and only the first\n#> element will be used\n#>
  # A tibble: 10 x 2\n#>   score grade\n#>   <int> <chr>\n#> 1    97 A    \n#> 2    43
  A    \n#> 3    77 A    \n#> 4    24 A    \n#> 5    11 A    \n#> # ... with 5 more
  rows\n```\n\nYou can always work around this problem using one of the `map_`\nfunctions
  from purrr. In this case, `grade()` returns a character vector\nso we’d use `map_chr()`:\n\n```
  r\ndf %>% mutate(grade = map_chr(score, grade))\n#> # A tibble: 10 x 2\n#>   score
  grade\n#>   <int> <chr>\n#> 1    97 A    \n#> 2    43 F    \n#> 3    77 C    \n#>
  4    24 F    \n#> 5    11 F    \n#> # ... with 5 more rows\n```\n\nHowever, there
  is often an alternative, more elegant approach by relying\non an exising vector
  function. For example, you can always rewrite a set\nof nested if-else statements
  to use `case_when()`:\n\n``` r\ngrade2 <- function(x) {\n  case_when(\n    x > 90
  ~ \"A\",\n    x > 80 ~ \"B\",\n    x > 70 ~ \"C\",\n    x > 60 ~ \"D\",\n    TRUE
  ~   \"F\"\n  )\n}\ngrade(seq(0, 100, by = 10))\n#> Warning in if (x >= 90) {: the
  condition has length > 1 and only the first\n#> element will be used\n#> Warning
  in if (x >= 80) {: the condition has length > 1 and only the first\n#> element will
  be used\n#> Warning in if (x >= 70) {: the condition has length > 1 and only the
  first\n#> element will be used\n#> Warning in if (x >= 60) {: the condition has
  length > 1 and only the first\n#> element will be used\n#> [1] \"F\"\n\ndf %>% mutate(grade
  = grade2(score))\n#> # A tibble: 10 x 2\n#>   score grade\n#>   <int> <chr>\n#>
  1    97 A    \n#> 2    43 F    \n#> 3    77 C    \n#> 4    24 F    \n#> 5    11
  F    \n#> # ... with 5 more rows\n```\n\nFor this particular case, there’s an even
  more targetted function from\nbase R: `cut()`. Its job is to “cut” a number into
  labelled intervals.\nYou give it a vector of breaks and a vector of labels, and
  it produces a\nfactor for you:\n\n``` r\ngrade3 <- function(x) {\n  cut(x, \n    breaks
  = c(-Inf, 60, 70, 80, 90, Inf), \n    labels = c(\"F\", \"D\", \"C\", \"B\", \"A\")\n
  \ )\n}\ngrade3(seq(0, 100, by = 10))\n#>  [1] F F F F F F F D C B A\n#> Levels:
  F D C B A\n```\n\n(Note that you supply it one less `label` than `breaks`; if this
  is\nconfusing, try drawing a picture.)\n\nIn general, there’s no easy way to find
  out that there’s an existing\nfunction that will make your life much easier. The
  best technique is to\ncontinually expand your knowledge of R by reading widely;
  a good place\nto start are the weekly highlights on <http://rweekly.org/>.\n\n##
  Matching many patterns\n\nA similar problem is accidentally using a vectorised function
  as if it’s\na scalar function, making life harder for yourself. I’ll illustrate
  the\nproblem with a function that you’ll already familiar with\n`stringr::str_detect()`.
  So far when you’ve used stringr, we’ve always\nused a single `pattern`. But imagine
  you have a new challenge: you have\na single string and you want see which of a
  possible set of patterns it\nmatches:\n\n``` r\nprivate <- tribble(\n  ~ name,  ~
  pattern,\n  \"ssn\",   \"\\\\d{3}-\\\\d{2}-\\\\d{4}\",\n  \"email\", \"[a-z]+@[a-z]+\\\\.[a-z]{2,4}\",\n
  \ \"phone\", \"\\\\d{3}[- ]?\\\\d{3}[- ]?\\\\d{4}\"\n)\n\nstring <- \"My social
  security number is 231-57-7340 and my phone number is 712-458-2189\"\n```\n\nYou
  might be tempted to use `map_lgl()`:\n\n``` r\nmatch <- map_lgl(private$pattern,
  ~ str_detect(string, pattern = .x))\nprivate$name[match]\n#> [1] \"ssn\"   \"phone\"\n```\n\nBut
  if you carefully read the documentation for `str_detect()` you’ll\ndiscover that
  this is unnecessary because `str_detect()` is vectorised\noven `pattern`. That means
  you don’t need `map_lgl()`\\!\n\n``` r\nprivate$name[str_detect(string, private$pattern)]\n#>
  [1] \"ssn\"   \"phone\"\n```\n\nIt’s sometimes hard to tell from the documentation
  whether or not an\nargument is vectorised. If reading the docs doesn’t help, just
  try it\nwith a vector; if it works you’ll have learned something new and saved\nyourself
  a little typing.\n"
